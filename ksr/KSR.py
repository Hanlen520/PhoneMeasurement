import syssys.path.append('..')import FunctionCommon as FunComimport ConstResource as ComResimport FunctionPackage as FunPkgfrom core import MultiProcesstest_tool_apk = "/Users/elex/AndroidStudioProjects/HookKika/app/build/outputs/apk/app-debug.apk"gboard = "/Users/elex/Documents/apks/keyboard/gboard/Gboard_the_Google_Keyboard_v6.6.22.171938909-release-armeabi-v7a_apkpure.com.apk"swift_key = "/Users/elex/Documents/apks/keyboard/swiftkey/com.touchtype.swiftkey-6.6.1.20.apk"kika_rnn = "/Users/elex/Documents/apks/keyboard/kika_apk/kika_kikaEngine_with_rnn.apk"kika_nornn = "/Users/elex/Documents/apks/keyboard/kika_apk/kika_kikaEngine_without_rnn.apk"push_target = " push /Users/elex/Documents/ksr/ksr_test/target/origin/* /sdcard"rnn = Falseindex_test_tool = 0index_gboard = 1index_swift_key = 2index_kika_rnn = 3index_kika_normal = 4apk_path_arr = [test_tool_apk, gboard, swift_key, kika_rnn, kika_nornn]pkg_name_arr = ["com.example.kyle.hookkika",                "com.google.android.inputmethod.latin",                "com.touchtype.swiftkey",                "com.qisiemoji.inputmethod",                "com.qisiemoji.inputmethod",                ]keyword_arr = ["",  # omit test tool               "GBoard",               "SwiftKey",               "kika_Rnn",               "kika_normal",               ]IME = keyword_arr[index_swift_key]  # "GBoard"  # "kika"def handle(d, arg):    apk = IME    index = kika_nornn    for i in range(0, keyword_arr.__len__()):        if apk in keyword_arr[i]:            index = i            break    FunPkg.uninstall(d, pkg_name_arr[index])    FunPkg.install_r(d, apk_path_arr[index], True)    FunPkg.install_r(d, test_tool_apk, True)    FunCom.p_open(ComRes.adb_s_tag_prefix(d) + push_target)    # FunCom.p_open(ComRes.adb_r eboot(d))def install_keyboard(d):    to_install_path = '/Users/elex/Documents/apks/keyboard/to_install'    for f in FunPkg.get_apk_file_in_path(to_install_path):        FunPkg.install_r(d, f, True)def auto_process(d, args):    apk_path = '/Users/elex/AndroidStudioProjects/HookKika/app/app-release.apk'    typany_path = ' /Users/elex/Downloads/com.typany.ime-3.6.0@APK4Fun.com.apk'    ainr = 'adb -s %s install -r '    cmds = [        # 'adb -s %s push ' + apk_path + ' /sdcard/ksr.apk',        # 'adb -s %s push /Users/elex/Documents/ksr/ksr_test/target/*.txt /sdcard',        # ainr + apk_path,        # ainr + typany_path,        'adb -s %s shell am force-stop ' + 'com.example.kyle.ksr',        'adb -s %s shell am force-stop ' + 'com.example.kyle.ksrentrance',        # ainr + '/Users/elex/AndroidStudioProjects/KsrEntrance/app/app-release.apk',        # ainr + '/Users/elex/AndroidStudioProjects/AutoReverseGit/app/app-release.apk',        # 'adb -s %s shell rm /sdcard/task_* ' + apk_path,        # 'adb -s %s shell  am start -n com.example.kyle.ksr/.act.KsrActivity --es \"keyboard\" '        # '\"aitype\" --es \"target\" \"target_20lines.txt\" --es \"task_id\" \"268\" '        # '--es \"flag_file\" \"ksr_finish_flag_file\" --es \"non_system_app\" \"false\"',        # 'adb -s %s ' + 'reboot',    ]    args = args[0]    FunCom.log('args len: ' + str(len(args)))    FunCom.log(args)    for i in range(cmds.__len__()):        FunCom.p_open(cmds[i] % d)    if len(args) >= 2:        if '-r' in args:            FunCom.p_open(('adb -s %s ' + 'reboot') % d)        if '-k' in args:            install_keyboard(d)if __name__ == '__main__':    argv = sys.argv    MultiProcess.run(auto_process, False, argv)